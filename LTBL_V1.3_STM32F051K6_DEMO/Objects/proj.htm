<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jan 28 16:17:13 2020
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LTBL_Signal_GetSignalType &rArr; LTBL_DSHOT_Init &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[92]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">NMI_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[27]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[cf]">PWM_Init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">pinMode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[37]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[24]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[20]">EXTI0_1_IRQHandler</a> from exti.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">EXTI2_3_IRQHandler</a> from exti.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[22]">EXTI4_15_IRQHandler</a> from exti.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[32]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[2d]">TIM14_IRQHandler</a> from timer.o(i.TIM14_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2e]">TIM15_IRQHandler</a> from timer.o(i.TIM15_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2f]">TIM16_IRQHandler</a> from timer.o(i.TIM16_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[30]">TIM17_IRQHandler</a> from timer.o(i.TIM17_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from ltbl_signal.o(i.TIM2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2c]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[23]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from hardwareserial.o(i.USART1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from hardwareserial.o(i.USART2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[5f]">commHandler()</a> from identification.o(i._Z11commHandlerv) referenced from identification.o(i._Z20Identification_Beginv)
 <LI><a href="#[65]">Motor_Commucated()</a> from main.o(i._Z16Motor_Commucatedv) referenced from main.o(i.main)
 <LI><a href="#[63]">Signal_PWM_Captured(int)</a> from main.o(i._Z19Signal_PWM_Capturedi) referenced from main.o(i.main)
 <LI><a href="#[64]">Signal_DSHOT_Captured(int, unsigned char*)</a> from main.o(i._Z21Signal_DSHOT_CapturediPh) referenced from main.o(i.main)
 <LI><a href="#[60]">ltblPWMSignalCaptured(int)</a> from identification.o(i._Z21ltblPWMSignalCapturedi) referenced from identification.o(i._Z20Identification_Beginv)
 <LI><a href="#[61]">ltblDshotSignalCaptured(int, unsigned char*)</a> from identification.o(i._Z23ltblDshotSignalCapturediPh) referenced from identification.o(i._Z20Identification_Beginv)
 <LI><a href="#[62]">TwoWire::~TwoWire()</a> from wire.o(i._ZN7TwoWireD1Ev) referenced from wire.o(i.__sti___8_Wire_cpp_928ee5ff)
 <LI><a href="#[6a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[67]">__sti___18_HardwareSerial_cpp_cfa1b6a6</a> from hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[68]">__sti___7_SPI_cpp_ce5662b4</a> from spi.o(i.__sti___7_SPI_cpp_ce5662b4) referenced from spi.o(.init_array)
 <LI><a href="#[69]">__sti___8_Wire_cpp_928ee5ff</a> from wire.o(i.__sti___8_Wire_cpp_928ee5ff) referenced from wire.o(.init_array)
 <LI><a href="#[66]">__sti___8_main_cpp_d405580c</a> from main.o(i.__sti___8_main_cpp_d405580c) referenced from main.o(.init_array)
 <LI><a href="#[40]">ltblBrakeModeStep0</a> from ltbl.o(i.ltblBrakeModeStep0) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[41]">ltblBrakeModeStep1</a> from ltbl.o(i.ltblBrakeModeStep1) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[42]">ltblBrakeModeStep2</a> from ltbl.o(i.ltblBrakeModeStep2) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[43]">ltblBrakeModeStep3</a> from ltbl.o(i.ltblBrakeModeStep3) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[44]">ltblBrakeModeStep4</a> from ltbl.o(i.ltblBrakeModeStep4) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[45]">ltblBrakeModeStep5</a> from ltbl.o(i.ltblBrakeModeStep5) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[5e]">ltblDshotSignalCaptured</a> from ltbl_signal.o(i.ltblDshotSignalCaptured) referenced from ltbl_signal.o(i.LTBL_SIGNAL_GetThrottleState)
 <LI><a href="#[5e]">ltblDshotSignalCaptured</a> from ltbl_signal.o(i.ltblDshotSignalCaptured) referenced from ltbl_signal.o(i.LTBL_Signal_GetSignalType)
 <LI><a href="#[4c]">ltblFreeModeStep0</a> from ltbl.o(i.ltblFreeModeStep0) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[4d]">ltblFreeModeStep1</a> from ltbl.o(i.ltblFreeModeStep1) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[4e]">ltblFreeModeStep2</a> from ltbl.o(i.ltblFreeModeStep2) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[4f]">ltblFreeModeStep3</a> from ltbl.o(i.ltblFreeModeStep3) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[50]">ltblFreeModeStep4</a> from ltbl.o(i.ltblFreeModeStep4) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[51]">ltblFreeModeStep5</a> from ltbl.o(i.ltblFreeModeStep5) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[3a]">ltblNormalModeStep0</a> from ltbl.o(i.ltblNormalModeStep0) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[3b]">ltblNormalModeStep1</a> from ltbl.o(i.ltblNormalModeStep1) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[3c]">ltblNormalModeStep2</a> from ltbl.o(i.ltblNormalModeStep2) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[3d]">ltblNormalModeStep3</a> from ltbl.o(i.ltblNormalModeStep3) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[3e]">ltblNormalModeStep4</a> from ltbl.o(i.ltblNormalModeStep4) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[3f]">ltblNormalModeStep5</a> from ltbl.o(i.ltblNormalModeStep5) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[5d]">ltblPWMSignalCaptured</a> from ltbl_signal.o(i.ltblPWMSignalCaptured) referenced from ltbl_signal.o(i.LTBL_SIGNAL_GetThrottleState)
 <LI><a href="#[5d]">ltblPWMSignalCaptured</a> from ltbl_signal.o(i.ltblPWMSignalCaptured) referenced from ltbl_signal.o(i.LTBL_Signal_GetSignalType)
 <LI><a href="#[46]">ltblReverseModeStep0</a> from ltbl.o(i.ltblReverseModeStep0) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[47]">ltblReverseModeStep1</a> from ltbl.o(i.ltblReverseModeStep1) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[48]">ltblReverseModeStep2</a> from ltbl.o(i.ltblReverseModeStep2) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[49]">ltblReverseModeStep3</a> from ltbl.o(i.ltblReverseModeStep3) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[4a]">ltblReverseModeStep4</a> from ltbl.o(i.ltblReverseModeStep4) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[4b]">ltblReverseModeStep5</a> from ltbl.o(i.ltblReverseModeStep5) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[52]">ltblStartup1ModeStep0</a> from ltbl.o(i.ltblStartup1ModeStep0) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[53]">ltblStartup1ModeStep1</a> from ltbl.o(i.ltblStartup1ModeStep1) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[54]">ltblStartup1ModeStep2</a> from ltbl.o(i.ltblStartup1ModeStep2) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[55]">ltblStartup1ModeStep3</a> from ltbl.o(i.ltblStartup1ModeStep3) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[56]">ltblStartup1ModeStep4</a> from ltbl.o(i.ltblStartup1ModeStep4) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[57]">ltblStartup1ModeStep5</a> from ltbl.o(i.ltblStartup1ModeStep5) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[59]">ltblUpdateThrottleBrake</a> from ltbl.o(i.ltblUpdateThrottleBrake) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[5b]">ltblUpdateThrottleFree</a> from ltbl.o(i.ltblUpdateThrottleFree) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[58]">ltblUpdateThrottleNormal</a> from ltbl.o(i.ltblUpdateThrottleNormal) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[5a]">ltblUpdateThrottleReverse</a> from ltbl.o(i.ltblUpdateThrottleReverse) referenced from ltbl.o(i.LTBL_Init)
 <LI><a href="#[5c]">ltblUpdateThrottleStartup1</a> from ltbl.o(i.ltblUpdateThrottleStartup1) referenced from ltbl.o(i.LTBL_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[107]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[108]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[78]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[70]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[10b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[72]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[110]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[111]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[112]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[113]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[114]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[115]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[116]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[119]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[126]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[75]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[127]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[79]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LTBL_Signal_GetSignalType &rArr; LTBL_DSHOT_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[128]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[94]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[129]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f8]"></a>ltblWaitH</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ltbl.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep5
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep3
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep5
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep3
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep5
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep3
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep1
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep5
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep3
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep1
</UL>

<P><STRONG><a name="[f7]"></a>ltblWaitL</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ltbl.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep4
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep2
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep0
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep0
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep4
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep0
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep0
</UL>

<P><STRONG><a name="[a7]"></a>LTBL_SIGNAL_DSHOT_StructType1_ASM</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, ltbl_dshot.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Handler
</UL>

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[80]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetCommonThrottle(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetBrakeThrottle(short, unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep0
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep5
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep3
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblReverseModeStep0
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep4
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep3
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep1
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblNormalModeStep0
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep5
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep3
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblFreeModeStep0
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep5
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep3
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep2
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblBrakeModeStep0
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetCommonThrottle(unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Handler
</UL>

<P><STRONG><a name="[12d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetCommonThrottle(unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[86]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[85]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
</UL>

<P><STRONG><a name="[12e]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetCommonThrottle(unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[12f]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
</UL>

<P><STRONG><a name="[130]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetCommonThrottle(unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[131]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
</UL>

<P><STRONG><a name="[132]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
</UL>

<P><STRONG><a name="[81]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[84]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[133]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[8c]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[71]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[83]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[74]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[135]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[136]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[8f]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[7f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[76]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[95]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[90]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[96]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[137]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
</UL>

<P><STRONG><a name="[139]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
</UL>

<P><STRONG><a name="[bf]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
</UL>

<P><STRONG><a name="[fa]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
</UL>

<P><STRONG><a name="[a3]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Dispose
</UL>

<P><STRONG><a name="[b7]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f0xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[97]"></a>Delay_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, exti.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, exti.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, exti.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveData()
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_ErasePage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f0xx_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveData()
</UL>

<P><STRONG><a name="[e9]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveData()
</UL>

<P><STRONG><a name="[9e]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f0xx_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveData()
</UL>

<P><STRONG><a name="[e7]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveData()
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToPP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[bd]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToPP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep0
</UL>

<P><STRONG><a name="[9f]"></a>GPIOx_Init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, gpio.o(i.GPIOx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[d1]"></a>Get_Pinx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.Get_Pinx))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>LTBL_AttachCommEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_AttachCommEvent))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblDshotSignalCaptured(int, unsigned char*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPWMSignalCaptured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[ca]"></a>LTBL_DSHOT_AttachCaptureEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl_dshot.o(i.LTBL_DSHOT_AttachCaptureEvent))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SIGNAL_GetThrottleState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblDshotSignalCaptured(int, unsigned char*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPWMSignalCaptured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[a2]"></a>LTBL_DSHOT_Dispose</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ltbl_dshot.o(i.LTBL_DSHOT_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LTBL_DSHOT_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
</UL>

<P><STRONG><a name="[f4]"></a>LTBL_DSHOT_GetCaptureEventHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl_dshot.o(i.LTBL_DSHOT_GetCaptureEventHandler))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
</UL>

<P><STRONG><a name="[a5]"></a>LTBL_DSHOT_Handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ltbl_dshot.o(i.LTBL_DSHOT_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTBL_DSHOT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SIGNAL_DSHOT_StructType1_ASM
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>LTBL_DSHOT_Init</STRONG> (Thumb, 466 bytes, Stack size 120 bytes, ltbl_dshot.o(i.LTBL_DSHOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LTBL_DSHOT_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>LTBL_GetAvgCommInterval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_GetAvgCommInterval))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[f2]"></a>LTBL_GetCommEventHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_GetCommEventHandler))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
</UL>

<P><STRONG><a name="[eb]"></a>LTBL_GetStabilityStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_GetStabilityStep))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Commucated()
</UL>

<P><STRONG><a name="[ba]"></a>LTBL_Init</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, ltbl.o(i.LTBL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LTBL_Init &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>LTBL_PWM_AttachCaptureEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl_pwm.o(i.LTBL_PWM_AttachCaptureEvent))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SIGNAL_GetThrottleState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblDshotSignalCaptured(int, unsigned char*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPWMSignalCaptured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[c2]"></a>LTBL_PWM_Dispose</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ltbl_pwm.o(i.LTBL_PWM_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LTBL_PWM_Dispose
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
</UL>

<P><STRONG><a name="[f3]"></a>LTBL_PWM_GetCaptureEventHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl_pwm.o(i.LTBL_PWM_GetCaptureEventHandler))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
</UL>

<P><STRONG><a name="[c3]"></a>LTBL_PWM_Handler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, ltbl_pwm.o(i.LTBL_PWM_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LTBL_PWM_Handler &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>LTBL_PWM_Init</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, ltbl_pwm.o(i.LTBL_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LTBL_PWM_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>LTBL_Run</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ltbl.o(i.LTBL_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LTBL_Run &rArr; ltblPinToPP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToPP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>LTBL_SIGNAL_GetThrottleState</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ltbl_signal.o(i.LTBL_SIGNAL_GetThrottleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LTBL_SIGNAL_GetThrottleState
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>LTBL_SetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Commucated()
</UL>

<P><STRONG><a name="[e1]"></a>LTBL_SetPWMMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_SetPWMMode))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblDshotSignalCaptured(int, unsigned char*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPWMSignalCaptured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[cb]"></a>LTBL_Signal_GetSignalType</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ltbl_signal.o(i.LTBL_Signal_GetSignalType))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LTBL_Signal_GetSignalType &rArr; LTBL_DSHOT_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Dispose
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>LTBL_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[cc]"></a>LTBL_Tone</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, ltbl.o(i.LTBL_Tone))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LTBL_Tone &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToPP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>LTBL_UpdateThrottle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ltbl.o(i.LTBL_UpdateThrottle))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Commucated()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblDshotSignalCaptured(int, unsigned char*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPWMSignalCaptured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[cf]"></a>PWM_Init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + In Cycle
<LI>Call Chain = PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pinx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[a0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>

<P><STRONG><a name="[ab]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[d5]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[d4]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[103]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>RCC_HSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>RCC_PCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>RCC_PLLCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>RCC_PLLConfig</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f0xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM16_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM17_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM17_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ltbl_signal.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; LTBL_PWM_Handler &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Dispose
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Dispose
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[c1]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[b8]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[ac]"></a>TIM_DeInit</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[d3]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>TIM_ICInit</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[b0]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[b9]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[d6]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[d7]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[d8]"></a>TIM_OC2Init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[d9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[b6]"></a>TIM_OC3Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[da]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[db]"></a>TIM_OC4Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[dc]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblEnablePWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[b5]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[b2]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SelectInputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[b4]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SelectMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[b3]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[af]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Init
</UL>

<P><STRONG><a name="[ae]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
</UL>

<P><STRONG><a name="[d2]"></a>TIMx_Init</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, pwm.o(i.TIMx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIMx_Init &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwareserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwareserial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>USART_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>Config_LoadData()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, config.o(i._Z15Config_LoadDatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Config_LoadData()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>Config_SaveData()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, config.o(i._Z15Config_SaveDatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Config_SaveData() &rArr; FLASH_ProgramHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[65]"></a>Motor_Commucated()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main.o(i._Z16Motor_Commucatedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Commucated()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_UpdateThrottle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SetMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_GetStabilityStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ed]"></a>Config_RegesterData(void*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(i._Z19Config_RegesterDataPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Config_RegesterData(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Init()
</UL>

<P><STRONG><a name="[ec]"></a>Identification_Init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, identification.o(i._Z19Identification_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Identification_Init() &rArr; Config_RegesterData(void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_RegesterData(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>Signal_PWM_Captured(int)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, main.o(i._Z19Signal_PWM_Capturedi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Signal_PWM_Captured(int) &rArr; Identification_GetBrakeThrottle(short, unsigned) &rArr; Identification_GetCommonThrottle(unsigned) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetBrakeThrottle(short, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_UpdateThrottle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SetMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_GetAvgCommInterval
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_DSHOT_Captured(int, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f1]"></a>Identification_Begin()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, identification.o(i._Z20Identification_Beginv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Identification_Begin() &rArr; LTBL_Run &rArr; ltblPinToPP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Run
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_AttachCommEvent
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_GetCaptureEventHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_GetCaptureEventHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SetPWMMode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_GetCommEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Signal_DSHOT_Captured(int, unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i._Z21Signal_DSHOT_CapturediPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Signal_DSHOT_Captured(int, unsigned char*) &rArr; Signal_PWM_Captured(int) &rArr; Identification_GetBrakeThrottle(short, unsigned) &rArr; Identification_GetCommonThrottle(unsigned) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f0]"></a>Identification_GetBrakeThrottle(short, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, identification.o(i._Z31Identification_GetBrakeThrottlesj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Identification_GetBrakeThrottle(short, unsigned) &rArr; Identification_GetCommonThrottle(unsigned) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetCommonThrottle(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
</UL>

<P><STRONG><a name="[f5]"></a>Identification_GetCommonThrottle(unsigned)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, identification.o(i._Z32Identification_GetCommonThrottlej))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Identification_GetCommonThrottle(unsigned) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_GetBrakeThrottle(short, unsigned)
</UL>

<P><STRONG><a name="[62]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i.__sti___8_Wire_cpp_928ee5ff)
</UL>
<P><STRONG><a name="[13a]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev), UNUSED)

<P><STRONG><a name="[105]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>delay_us</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep0
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
</UL>

<P><STRONG><a name="[40]"></a>ltblBrakeModeStep0</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblBrakeModeStep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblBrakeModeStep0
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[41]"></a>ltblBrakeModeStep1</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblBrakeModeStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblBrakeModeStep1
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[42]"></a>ltblBrakeModeStep2</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblBrakeModeStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblBrakeModeStep2
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[43]"></a>ltblBrakeModeStep3</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblBrakeModeStep3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblBrakeModeStep3
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[44]"></a>ltblBrakeModeStep4</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblBrakeModeStep4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblBrakeModeStep4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[45]"></a>ltblBrakeModeStep5</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblBrakeModeStep5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblBrakeModeStep5
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[4c]"></a>ltblFreeModeStep0</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ltbl.o(i.ltblFreeModeStep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblFreeModeStep0
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[4d]"></a>ltblFreeModeStep1</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblFreeModeStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblFreeModeStep1
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[4e]"></a>ltblFreeModeStep2</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblFreeModeStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblFreeModeStep2
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[4f]"></a>ltblFreeModeStep3</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblFreeModeStep3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblFreeModeStep3
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[50]"></a>ltblFreeModeStep4</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ltbl.o(i.ltblFreeModeStep4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblFreeModeStep4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[51]"></a>ltblFreeModeStep5</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblFreeModeStep5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblFreeModeStep5
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[f9]"></a>ltblGetPhaseValue</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, ltbl.o(i.ltblGetPhaseValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ltblGetPhaseValue &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep0
</UL>

<P><STRONG><a name="[3a]"></a>ltblNormalModeStep0</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblNormalModeStep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblNormalModeStep0
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[3b]"></a>ltblNormalModeStep1</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblNormalModeStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblNormalModeStep1
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[3c]"></a>ltblNormalModeStep2</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblNormalModeStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblNormalModeStep2
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[3d]"></a>ltblNormalModeStep3</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblNormalModeStep3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblNormalModeStep3
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[3e]"></a>ltblNormalModeStep4</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblNormalModeStep4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblNormalModeStep4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[3f]"></a>ltblNormalModeStep5</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblNormalModeStep5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblNormalModeStep5
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[46]"></a>ltblReverseModeStep0</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblReverseModeStep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblReverseModeStep0
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[47]"></a>ltblReverseModeStep1</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblReverseModeStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblReverseModeStep1
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[48]"></a>ltblReverseModeStep2</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblReverseModeStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblReverseModeStep2
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[49]"></a>ltblReverseModeStep3</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblReverseModeStep3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblReverseModeStep3
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[4a]"></a>ltblReverseModeStep4</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ltbl.o(i.ltblReverseModeStep4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblReverseModeStep4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[4b]"></a>ltblReverseModeStep5</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ltbl.o(i.ltblReverseModeStep5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblReverseModeStep5
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblWaitH
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[52]"></a>ltblStartup1ModeStep0</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, ltbl.o(i.ltblStartup1ModeStep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltblStartup1ModeStep0 &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[53]"></a>ltblStartup1ModeStep1</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, ltbl.o(i.ltblStartup1ModeStep1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltblStartup1ModeStep1 &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[54]"></a>ltblStartup1ModeStep2</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, ltbl.o(i.ltblStartup1ModeStep2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltblStartup1ModeStep2 &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[55]"></a>ltblStartup1ModeStep3</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, ltbl.o(i.ltblStartup1ModeStep3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltblStartup1ModeStep3 &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[56]"></a>ltblStartup1ModeStep4</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, ltbl.o(i.ltblStartup1ModeStep4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltblStartup1ModeStep4 &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[57]"></a>ltblStartup1ModeStep5</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, ltbl.o(i.ltblStartup1ModeStep5))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltblStartup1ModeStep5 &rArr; ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPinToAF
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblGetPhaseValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[59]"></a>ltblUpdateThrottleBrake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.ltblUpdateThrottleBrake))
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[5b]"></a>ltblUpdateThrottleFree</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltbl.o(i.ltblUpdateThrottleFree))
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[58]"></a>ltblUpdateThrottleNormal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ltbl.o(i.ltblUpdateThrottleNormal))
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[5a]"></a>ltblUpdateThrottleReverse</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ltbl.o(i.ltblUpdateThrottleReverse))
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[5c]"></a>ltblUpdateThrottleStartup1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ltbl.o(i.ltblUpdateThrottleStartup1))
<BR>[Address Reference Count : 1]<UL><LI> ltbl.o(i.LTBL_Init)
</UL>
<P><STRONG><a name="[7a]"></a>main</STRONG> (Thumb, 702 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; LTBL_Signal_GetSignalType &rArr; LTBL_DSHOT_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Init()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_LoadData()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Signal_GetSignalType
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SIGNAL_GetThrottleState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_AttachCommEvent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ef]"></a>map</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arduino.o(i.map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
</UL>

<P><STRONG><a name="[e0]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Identification_Begin()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Captured(int)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Commucated()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_d405580c
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblDshotSignalCaptured(int, unsigned char*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblPWMSignalCaptured(int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commHandler()
</UL>

<P><STRONG><a name="[d0]"></a>pinMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arduino.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pinMode &rArr; PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>__sti___8_main_cpp_d405580c</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.__sti___8_main_cpp_d405580c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___8_main_cpp_d405580c
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[c0]"></a>ltblEnablePWM</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ltbl.o(i.ltblEnablePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ltblEnablePWM &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
</UL>

<P><STRONG><a name="[bc]"></a>ltblPinToAF</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ltbl.o(i.ltblPinToAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ltblPinToAF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep5
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltblStartup1ModeStep0
</UL>

<P><STRONG><a name="[c7]"></a>ltblPinToPP</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ltbl.o(i.ltblPinToPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ltblPinToPP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Tone
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Run
</UL>

<P><STRONG><a name="[5e]"></a>ltblDshotSignalCaptured</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ltbl_signal.o(i.ltblDshotSignalCaptured))
<BR>[Address Reference Count : 2]<UL><LI> ltbl_signal.o(i.LTBL_Signal_GetSignalType)
<LI> ltbl_signal.o(i.LTBL_SIGNAL_GetThrottleState)
</UL>
<P><STRONG><a name="[5d]"></a>ltblPWMSignalCaptured</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ltbl_signal.o(i.ltblPWMSignalCaptured))
<BR>[Address Reference Count : 2]<UL><LI> ltbl_signal.o(i.LTBL_Signal_GetSignalType)
<LI> ltbl_signal.o(i.LTBL_SIGNAL_GetThrottleState)
</UL>
<P><STRONG><a name="[5f]"></a>commHandler()</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, identification.o(i._Z11commHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = commHandler() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_SaveData()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_UpdateThrottle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_GetAvgCommInterval
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_AttachCommEvent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_Stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SetPWMMode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> identification.o(i._Z20Identification_Beginv)
</UL>
<P><STRONG><a name="[60]"></a>ltblPWMSignalCaptured(int)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, identification.o(i._Z21ltblPWMSignalCapturedi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblPWMSignalCaptured(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_UpdateThrottle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_AttachCommEvent
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SetPWMMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> identification.o(i._Z20Identification_Beginv)
</UL>
<P><STRONG><a name="[61]"></a>ltblDshotSignalCaptured(int, unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, identification.o(i._Z23ltblDshotSignalCapturediPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ltblDshotSignalCaptured(int, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_UpdateThrottle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_PWM_AttachCaptureEvent
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_DSHOT_AttachCaptureEvent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_AttachCommEvent
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTBL_SetPWMMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> identification.o(i._Z20Identification_Beginv)
</UL>
<P><STRONG><a name="[67]"></a>__sti___18_HardwareSerial_cpp_cfa1b6a6</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___18_HardwareSerial_cpp_cfa1b6a6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[68]"></a>__sti___7_SPI_cpp_ce5662b4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.__sti___7_SPI_cpp_ce5662b4))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[69]"></a>__sti___8_Wire_cpp_928ee5ff</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wire.o(i.__sti___8_Wire_cpp_928ee5ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___8_Wire_cpp_928ee5ff &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[93]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
